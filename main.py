import asyncio
import os
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from flask import Flask
from threading import Thread
from dotenv import load_dotenv
from questions import op_questions, general_questions, lean_questions, qr_questions

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üîê ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 710633503  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ

# –õ–æ–≥-—Ñ–∞–π–ª
if not os.path.exists("logs.txt"):
    with open("logs.txt", "w", encoding="utf-8") as f:
        f.write("FullName | Username | –î—ñ—è\n")

def log_action(user: types.User, action: str):
    full_name = f"{user.first_name} {user.last_name or ''}".strip()
    username = f"@{user.username}" if user.username else "‚Äî"
    with open("logs.txt", "a", encoding="utf-8") as f:
        f.write(f"{full_name} | {username} | {action}\n")

# Flask —Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

@app.route("/ping")
def ping():
    return "OK", 200

Thread(target=lambda: app.run(host="0.0.0.0", port=8080)).start()

# –°—Ç–∞–Ω–∏
class QuizState(StatesGroup):
    category = State()
    question_index = State()
    selected_options = State()
    score = State()
    answers = State()

# –°—Ç–∞—Ä—Ç
@dp.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("ü¶∫ –û–ü", "üìö –ó–∞–≥–∞–ª—å–Ω—ñ")
    keyboard.add("‚öôÔ∏è Lean", "üí™QR")
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É:", reply_markup=keyboard)
    await state.clear()
    log_action(message.from_user, "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ / –≤–∏–±—ñ—Ä —Ä–æ–∑–¥—ñ–ª—É")

# –í–∏–±—ñ—Ä —Ä–æ–∑–¥—ñ–ª—É
@dp.message(F.text.in_({"ü¶∫ –û–ü", "üìö –ó–∞–≥–∞–ª—å–Ω—ñ", "‚öôÔ∏è Lean", "üí™QR"}))
async def select_category(message: types.Message, state: FSMContext):
    category_map = {
        "ü¶∫ –û–ü": op_questions,
        "üìö –ó–∞–≥–∞–ª—å–Ω—ñ": general_questions,
        "‚öôÔ∏è Lean": lean_questions,
        "üí™QR": hard_questions,
    }
    questions = category_map[message.text]
    random.shuffle(questions)
    await state.update_data(
        category=message.text,
        question_index=0,
        selected_options=[],
        score=0,
        questions=questions,
        answers=[]
    )
    log_action(message.from_user, f"–ü–æ—á–∞–≤ —Ç–µ—Å—Ç {message.text}")
    await send_question(message.chat.id, questions[0], 0)

async def send_question(chat_id, question, index):
    options = question["options"]
    random.shuffle(options)
    buttons = [
        [InlineKeyboardButton(text=opt[0], callback_data=f"opt_{i}")]
        for i, opt in enumerate(options)
    ]
    buttons.append([InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm")])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    text = f"{question['text']}"
    await bot.send_message(chat_id, text, reply_markup=markup)

@dp.callback_query(F.data.startswith("opt_"))
async def select_option(callback: CallbackQuery, state: FSMContext):
    idx = int(callback.data.split("_")[1])
    data = await state.get_data()
    selected = data.get("selected_options", [])
    if idx in selected:
        selected.remove(idx)
    else:
        selected.append(idx)
    await state.update_data(selected_options=selected)
    await callback.answer("–í–∞—Ä—ñ–∞–Ω—Ç –æ–±—Ä–∞–Ω–æ!")

@dp.callback_query(F.data == "confirm")
async def confirm(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    index = data["question_index"]
    questions = data["questions"]
    selected = data.get("selected_options", [])
    current_question = questions[index]
    correct_indexes = [i for i, opt in enumerate(current_question["options"]) if opt[1]]

    is_correct = set(selected) == set(correct_indexes)
    score = data["score"] + (1 if is_correct else 0)
    answer_summary = {
        "text": current_question["text"],
        "selected": [current_question["options"][i][0] for i in selected],
        "correct": [opt[0] for opt in current_question["options"] if opt[1]],
        "is_correct": is_correct
    }
    answers = data["answers"]
    answers.append(answer_summary)

    if index + 1 >= len(questions):
        await state.clear()
        text = f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {score} –∑ {len(questions)}"
        buttons = [
            [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑", callback_data="restart")],
            [InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="details")]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer(text, reply_markup=markup)
        log_action(callback.from_user, f"–ó–∞–≤–µ—Ä—à–∏–≤ —Ç–µ—Å—Ç ({score}/{len(questions)})")
        await state.update_data(answers=answers)
    else:
        await state.update_data(
            question_index=index + 1,
            selected_options=[],
            score=score,
            answers=answers
        )
        await send_question(callback.message.chat.id, questions[index + 1], index + 1)
    await callback.answer()

@dp.callback_query(F.data == "restart")
async def restart(callback: CallbackQuery, state: FSMContext):
    await start(callback.message, state)

@dp.callback_query(F.data == "details")
async def details(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    answers = data.get("answers", [])
    text = "üìã *–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É:*\n\n"
    for ans in answers:
        if not ans["is_correct"]:
            text += f"‚ùå *{ans['text']}*\n"
            text += f"–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {', '.join(ans['selected']) or '‚Äî'}\n"
            text += f"–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {', '.join(ans['correct'])}\n\n"
    if text.strip() == "üìã *–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É:*":
        text += "–£—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ! üéâ"
    await callback.message.answer(text, parse_mode="Markdown")
    await callback.answer()
