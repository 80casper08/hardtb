import asyncio
import os
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from flask import Flask
from threading import Thread
from dotenv import load_dotenv
from questions import op_questions, general_questions, lean_questions, qr_questions, hard_questions

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

@app.route("/ping")
def ping():
    return "OK", 200

Thread(target=lambda: app.run(host="0.0.0.0", port=8080)).start()

# –°—Ç–∞–Ω–∏
class QuizState(StatesGroup):
    category = State()
    question_index = State()
    selected_options = State()

# –†–æ–∑–¥—ñ–ª–∏
sections = {
    "ü¶Æ –û–ü": op_questions,
    "üìö –ó–∞–≥–∞–ª—å–Ω—ñ": general_questions,
    "‚öôÔ∏è LEAN": lean_questions,
    "üóû QR": qr_questions,
    "üí™ Hard Test": hard_questions,
}

def main_keyboard():
    buttons = [types.KeyboardButton(text=section) for section in sections]
    return types.ReplyKeyboardMarkup(
        keyboard=[[button] for button in buttons],
        resize_keyboard=True
    )

# –°—Ç–∞—Ä—Ç —Ç–µ—Å—Ç—É
@dp.message(F.text.in_(sections.keys()))
async def start_quiz(message: types.Message, state: FSMContext):
    category = message.text
    await state.set_state(QuizState.category)
    await state.update_data(category=category, question_index=0, selected_options=[], wrong_answers=[])
    await send_question(message, state)

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω–Ω—è
async def send_question(message_or_callback, state: FSMContext):
    data = await state.get_data()
    questions = sections[data["category"]]
    index = data["question_index"]

    if index >= len(questions):
        correct = 0
        wrongs = []
        for i, q in enumerate(questions):
            correct_answers = {j for j, (_, is_correct) in enumerate(q["options"]) if is_correct}
            user_selected = set(data["selected_options"][i])
            if correct_answers == user_selected:
                correct += 1
            else:
                wrongs.append({
                    "question": q["text"],
                    "options": q["options"],
                    "selected": list(user_selected),
                    "correct": list(correct_answers)
                })

        await state.update_data(wrong_answers=wrongs)

        percent = round(correct / len(questions) * 100)
        grade = "‚ùå –ü–æ–≥–∞–Ω–æ"
        if percent >= 90:
            grade = "üíØ –í—ñ–¥–º—ñ–Ω–Ω–æ"
        elif percent >= 70:
            grade = "üëç –î–æ–±—Ä–µ"
        elif percent >= 50:
            grade = "üëå –ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ"

        result = (
            "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É:*\n\n"
            f"‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:* {correct} –∑ {len(questions)}\n"
            f"üìà *–£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å:* {percent}%\n"
            f"üèÜ *–û—Ü—ñ–Ω–∫–∞:* {grade}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑", callback_data="restart")],
            [InlineKeyboardButton(text="üìã –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", callback_data="details")]
        ])

        # ‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è CallbackQuery
        if isinstance(message_or_callback, CallbackQuery):
            await message_or_callback.message.answer(result, reply_markup=keyboard, parse_mode="Markdown")
        else:
            await message_or_callback.answer(result, reply_markup=keyboard, parse_mode="Markdown")
        return

    # ... —Ä–µ—à—Ç–∞ –∫–æ–¥—É –±–µ–∑ –∑–º—ñ–Ω (–∑–∞–ª–∏—à —ó—ó —è–∫ —î)


# –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –æ–ø—Ü—ñ–π
@dp.callback_query(F.data == "confirm")
async def confirm_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = list(data.get("temp_selected", set()))
    selected_options = data.get("selected_options", [])
    selected_options.append(selected)
    await state.update_data(
        selected_options=selected_options,
        question_index=data["question_index"] + 1,
        temp_selected=set()
    )
    await send_question(callback, state)

# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
@dp.callback_query(F.data == "confirm")
async def confirm_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = list(data.get("temp_selected", set()))
    selected_options = data.get("selected_options", [])
    selected_options.append(selected)
    await state.update_data(
        selected_options=selected_options,
        question_index=data["question_index"] + 1,
        temp_selected=set()
    )
    await send_question(callback, state)

# –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
@dp.callback_query(F.data == "details")
async def show_details(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    wrongs = data.get("wrong_answers", [])
    if not wrongs:
        await callback.message.answer("‚úÖ –£—Å—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ!")
        return
    for item in wrongs:
        text = f"‚ùå *{item['question']}*\n"
        for idx, (label, _) in enumerate(item["options"]):
            mark = "‚òëÔ∏è" if idx in item["selected"] else "üîò"
            text += f"{mark} {label}\n"
        selected_text = [item["options"][i][0] for i in item["selected"]] if item["selected"] else ["‚Äî"]
        correct_text = [item["options"][i][0] for i in item["correct"]]
        text += f"\n_–¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å:_ {', '.join(selected_text)}"
        text += f"\n_–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:_ {', '.join(correct_text)}"
        await callback.message.answer(text, parse_mode="Markdown")

# –ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ
@dp.callback_query(F.data == "restart")
async def restart_quiz(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª –¥–ª—è —Ç–µ—Å—Ç—É:", reply_markup=main_keyboard())

# –°—Ç–∞—Ä—Ç
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    await message.answer("–í–∏–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª –¥–ª—è —Ç–µ—Å—Ç—É:", reply_markup=main_keyboard())

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

